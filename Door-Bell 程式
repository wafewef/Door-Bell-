#include <Arduino.h>
#include "WiFi.h"
#include "VideoStream.h"
#include "StreamIO.h"
#include "RTSP.h"
#include "MotionDetection.h"
#include "VideoStreamOverlay.h"
#include "AmebaFatFS.h"
#include "Base64.h"

// User Configuration
#define CHANNEL   0              // Video channel for streaming & snapshot
#define CHANNELMD 3              // RGB format video for motion detection only available on channel 3
#define FILENAME  "image.jpg"    // Save as jpg image in SD Card

// Google Script and Line Notify details
String myScript = "/macros/s/AKfycbyBn9GzDQ8jgMkEbC43YOARRJvkPVZpYEpqYeHx4wd9BIrqo9LPZSfTQIabunkUQKS1IQ/exec";    // Google Apps Script path
String myFoldername = "&myFoldername=AMB82";                                    // Google Drive folder name
String myFilename = "&myFilename=image.jpg";                                    // Google Drive file name
String myImage = "&myFile=";

char ssid[] = "iphone";    // WiFi SSID
char pass[] = "1234554321";        // WiFi password
int status = WL_IDLE_STATUS;

uint32_t img_addr = 0;
uint32_t img_len = 0;

// Objects
VideoSetting config(VIDEO_D1, CAM_FPS, VIDEO_H264_JPEG, 1);    // High resolution video for streaming
VideoSetting configMD(VIDEO_VGA, 10, VIDEO_RGB, 0);            // Low resolution RGB video for motion detection
RTSP rtsp;
StreamIO videoStreamer(1, 1);
StreamIO videoStreamerMD(1, 1);
MotionDetection MD;
AmebaFatFS fs;
WiFiSSLClient wifiClient;

char buf[512];
char *p;
bool flag_motion = false;

void mdPostProcess(std::vector<MotionDetectionResult> md_results) {
    // Motion detection results
    OSD.createBitmap(CHANNEL);
    if (MD.getResultCount() > 0) {
        for (uint16_t i = 0; i < MD.getResultCount(); i++) {
            MotionDetectionResult result = md_results[i];
            int xmin = (int)(result.xMin() * config.width());
            int xmax = (int)(result.xMax() * config.width());
            int ymin = (int)(result.yMin() * config.height());
            int ymax = (int)(result.yMax() * config.height());
            OSD.drawRect(CHANNEL, xmin, ymin, xmax, ymax, 3, COLOR_GREEN);
        }
        flag_motion = true;
    } else {
        flag_motion = false;
    }
    OSD.update(CHANNEL);
    delay(100);
}

void setup() {
    Serial.begin(115200);

    // Connect to WiFi network
    while (status != WL_CONNECTED) {
        Serial.print("Attempting to connect to WPA SSID: ");
        Serial.println(ssid);
        status = WiFi.begin(ssid, pass);
        delay(2000);
    }
    WiFiCon();

    // Configure camera video channels
    Camera.configVideoChannel(CHANNEL, config);
    Camera.configVideoChannel(CHANNELMD, configMD);
    Camera.videoInit();

    // Configure RTSP for high resolution video stream
    rtsp.configVideo(config);
    rtsp.begin();

    // Configure motion detection for low resolution RGB video stream
    MD.configVideo(configMD);
    MD.setResultCallback(mdPostProcess);
    MD.begin();

    // Configure StreamIO for high res video channel to RTSP
    videoStreamer.registerInput(Camera.getStream(CHANNEL));
    videoStreamer.registerOutput(rtsp);
    if (videoStreamer.begin() != 0) {
        Serial.println("StreamIO link start failed");
    }
    Camera.channelBegin(CHANNEL);

    // Configure StreamIO for low res video channel to motion detection
    videoStreamerMD.registerInput(Camera.getStream(CHANNELMD));
    videoStreamerMD.setStackSize();
    videoStreamerMD.registerOutput(MD);
    if (videoStreamerMD.begin() != 0) {
        Serial.println("StreamIO link start failed");
    }
    Camera.channelBegin(CHANNELMD);

    // OSD for drawing on high resolution video stream
    OSD.configVideo(CHANNEL, config);
    OSD.begin();
    Serial.println("");
    Serial.println("================================");
    Serial.println("Motion Detecting");
    Serial.println("================================");
    delay(2000);
}

void loop() {
    if (flag_motion) {
        Serial.println("Motion Detected");

        // Initialize SD card
        if (!fs.begin()) {
            StreamEnd();
            pinMode(LED_B, OUTPUT);
            digitalWrite(LED_B, HIGH);
            Serial.println("");
            Serial.println("================================");
            Serial.println("[ERROR] SD Card Mount Failed !!!");
            Serial.println("================================");
            while (1);
        }

        memset(buf, 0, sizeof(buf));
        fs.readDir(fs.getRootPath(), buf, sizeof(buf));
        String filepath = String(fs.getRootPath()) + String(FILENAME);
        File file = fs.open(filepath);
        if (!file) {
            Serial.println("");
            Serial.println("================================");
            Serial.println("[ERROR] Failed to open file for reading");
            Serial.println("================================");
            fs.end();
        }

        // Taking Photo
        CamFlash();
        Camera.getImage(CHANNEL, &img_addr, &img_len);
        file.write((uint8_t *)img_addr, img_len);
        file.close();

        Serial.println("===================================");
        Serial.println("[INFO] Photo Captured ...");
        Serial.println("===================================");

        p = buf;
        while (strlen(p) > 0) {
            if (strstr(p, FILENAME) != NULL) {
                Serial.println("[INFO] Found 'image.jpg' in the string.");
                Serial.println("[INFO] Processing file...");
            }
            p += strlen(p) + 1;
        }

        uint8_t *fileinput;
        file = fs.open(filepath);
        unsigned int fileSize = file.size();
        fileinput = (uint8_t *)malloc(fileSize + 1);
        file.read(fileinput, fileSize);
        fileinput[fileSize] = '\0';
        file.close();
        fs.end();

        char *input = (char *)fileinput;
        String imageFile = "data:image/jpeg;base32,";
        char output[base64_enc_len(3)];
        for (unsigned int i = 0; i < fileSize; i++) {
            base64_encode(output, (input++), 3);
            if (i % 3 == 0) {
                imageFile += urlencode(String(output));
            }
        }

        // Upload file to Google Drive
        Serial.println("[INFO] Uploading file to Google Drive...");
        String Data = myFoldername + myFilename + myImage;
        const char *myDomain = "script.google.com";
        String getAll = "", getBody = "";
        Serial.println("[INFO] Connect to " + String(myDomain));

        if (wifiClient.connect(myDomain, 443)) {
            Serial.println("[INFO] Connection successful");

            wifiClient.println("POST " + myScript + " HTTP/1.1");
            wifiClient.println("Host: " + String(myDomain));
            wifiClient.println("Content-Length: " + String(Data.length() + imageFile.length()));
            wifiClient.println("Content-Type: application/x-www-form-urlencoded");
            wifiClient.println("Connection: keep-alive");
            wifiClient.println();

            wifiClient.print(Data);
            for (unsigned int Index = 0; Index < imageFile.length(); Index = Index + 1000) {
                wifiClient.print(imageFile.substring(Index, Index + 1000));
            }

            int waitTime = 10000;    // timeout 10 seconds
            unsigned int startTime = millis();
            boolean state = false;

            while ((startTime + waitTime) > millis()) {
                delay(100);
                while (wifiClient.available()) {
                    char c = wifiClient.read();
                    if (state == true) {
                        getBody += String(c);
                    }
                    if (c == '\n') {
                        if (getAll.length() == 0) {
                            state = true;
                        }
                        getAll = "";
                    } else if (c != '\r') {
                        getAll += String(c);
                    }
                    startTime = millis();
                }
                if (getBody.length() > 0) {
                    break;
                }
            }
            wifiClient.stop();
            Serial.println(getBody);
        } else {
            getBody = "Connected to " + String(myDomain) + " failed.";
            Serial.println("[INFO] Connected to " + String(myDomain) + " failed.");
        }
        Serial.println("[INFO] File uploading done.");
        Serial.println("===================================");
    } else {
        Serial.print(".");
    }
}

String urlencode(String str) {
    const char *msg = str.c_str();
    const char *hex = "0123456789ABCDEF";
    String encodedMsg = "";
    while (*msg != '\0') {
        if (('a' <= *msg && *msg <= 'z') || ('A' <= *msg && *msg <= 'Z') || ('0' <= *msg && *msg <= '9') || *msg == '-' || *msg == '_' || *msg == '.' || *msg == '~') {
            encodedMsg += *msg;
        } else {
            encodedMsg += '%';
            encodedMsg += hex[(unsigned char)*msg >> 4];
            encodedMsg += hex[*msg & 0xf];
        }
        msg++;
    }
    return encodedMsg;
}

void CamFlash() {
    pinMode(LED_G, OUTPUT);
    for (int i = 0; i < 5; i++) {
        digitalWrite(LED_G, HIGH);
        delay(100);
        digitalWrite(LED_G, LOW);
        delay(100);
    }
}

void WiFiCon() {
    pinMode(LED_B, OUTPUT);
    for (int i = 0; i < 2; i++) {
        digitalWrite(LED_B, HIGH);
        delay(300);
        digitalWrite(LED_B, LOW);
        delay(300);
    }
}

void StreamEnd() {
    videoStreamer.pause();
    videoStreamerMD.pause();
    rtsp.end();
    Camera.channelEnd();
    MD.end();
    Camera.videoDeinit();
    delay(1000);
}
